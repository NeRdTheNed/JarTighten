buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.gradle.plugin-publish' version '1.2.0'
    id 'io.github.nerdthened.jartighten' version '1.1.0'
}

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

apply plugin: 'java'

group = 'io.github.NeRdTheNed.JarTighten'
version = project.version

final def build_release = System.getenv("BUILD_RELEASE") == "true"

// Add snapshot suffix to version if not building a release.
// To build a release, set the environment variable BUILD_RELEASE to true.
if (!build_release) {
    version += "-SNAPSHOT"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

final def compiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(8)
}

// Tells Gradle to use the previously defined Java 8 compatible JDK.
java {
    toolchain {
        compiler
    }
}

// Tells Gradle to always compile with the previously defined Java 8 compatible JDK.
tasks.withType(JavaCompile).configureEach {
    javaCompiler = compiler
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    // Tells Gradle to include more debug information in compiled .class files.
    options.debug = true
    options.debugOptions.debugLevel = 'source,lines,vars'
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

shadowJar {
    minimize()
    relocate 'ru.eustas.zopfli', 'io.github.NeRdTheNed.JarTighten.shadow.zopfli'
    relocate 'software.coley.llzip', 'io.github.NeRdTheNed.JarTighten.shadow.llzip'

    dependencies {
        exclude(dependency('org.slf4j:.*'))
    }

    archiveClassifier = ''
}

jartighten {
    dependsOn(shadowJar)

    inputFile = layout.projectDirectory.file('build/libs/' + project.name + '-' + version + '.jar')
    outputFile = layout.projectDirectory.file('build/libs/' + project.name + '-' + version + '.jar')

    removeTimestamps = true
    removeComments = true

    if (build_release) {
        recompressZopfli = true
    }
}

build.finalizedBy(jartighten)
publishPlugins.dependsOn(jartighten)
publishToMavenLocal.dependsOn(jartighten)

afterEvaluate {
    tasks.named("generateMetadataFileForPluginMavenPublication") {
        dependsOn(jartighten)
    }
}

dependencies {
    implementation project(':JarTighten-lib')
}

gradlePlugin {
    website = 'https://github.com/NeRdTheNed/JarTighten'
    vcsUrl = 'https://github.com/NeRdTheNed/JarTighten'

    plugins {
        jartightenPlugin {
            id = 'io.github.nerdthened.jartighten'
            implementationClass = 'io.github.NeRdTheNed.JarTighten.JarTightenPlugin'
            displayName = 'JarTighten Plugin'
            description = 'Gradle plugin to reduce the size of jar files'
            tags.set(['jar', 'zip', 'compression', 'compress'])
        }
    }
}
